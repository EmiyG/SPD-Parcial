// C++ code
// DEFINO PINES de los display y los Btns
#define A 12
#define B 13
#define C 7
#define D 8
#define E 9
#define F 11
#define G 10
#define btnSumar 4
#define btnRestar 3
#define btnReinicio 2
#define switchPin 5
#define fotodiodoPin A1

int motorPin = 6;
int tempSensorPin = A0;
bool mostrarPrimos = false;
int ultimoPrimo = 0;

void setup()
{
  // Pines de salida
  pinMode(A, OUTPUT);
  pinMode(B, OUTPUT);
  pinMode(C, OUTPUT);
  pinMode(D, OUTPUT);
  pinMode(E, OUTPUT);
  pinMode(F, OUTPUT);
  pinMode(G, OUTPUT);
  pinMode(btnSumar, INPUT_PULLUP);
  pinMode(btnRestar, INPUT_PULLUP);
  pinMode(btnReinicio, INPUT_PULLUP);
  pinMode(A4, OUTPUT);
  pinMode(A5, OUTPUT);
  pinMode(motorPin, OUTPUT); // Agregamos el pin del motor
  pinMode(tempSensorPin, INPUT); // Agregamos el pin del sensor de temperatura
  pinMode(fotodiodoPin, INPUT);
  Serial.begin(9600);
}

int contadorNumeros = 0;
int leerReiniciar = 0;
int leerSumar = 0;
int leerRestar = 0;
int restarAnterior = 1;
int sumarAnterior = 1;
int reiniciarAnterior = 1;
bool switchEstadoAnterior = HIGH;

void loop()
{
  int switchEstado = digitalRead(switchPin);

  if (switchEstado != switchEstadoAnterior)
  {
    switchEstadoAnterior = switchEstado;

    if (switchEstado == LOW)
    {
      mostrarNumerosPrimos();
      return;
    }
  }

  int valorFotodiodo = analogRead(fotodiodoPin);
  Serial.println(valorFotodiodo); // Agrega esta línea para imprimir el valor del fotodiodo

  if (valorFotodiodo > 80) // Ajusta este umbral según sea necesario
  {
    borrarDisplay();
  }
  else
  {
    int presionoTecla = teclaPresionada();

    if (presionoTecla == btnSumar)
    {
      contadorNumeros++;
      if (contadorNumeros > 99)
      {
        contadorNumeros = 0;
      }
    }
    else if (presionoTecla == btnRestar)
    {
      contadorNumeros--;
      if (contadorNumeros < 0)
      {
        contadorNumeros = 99;
      }
    }
    else if (presionoTecla == btnReinicio)
    {
      contadorNumeros = 0;
      mostrarPrimos = false;
    }

    manejarDisplay(contadorNumeros);
  }

  ajustarVelocidadMotor(analogRead(tempSensorPin));
}

void ajustarVelocidadMotor(int sensorValue)
{
  int velocidad = map(sensorValue, 0, 1023, 0, 255);
  analogWrite(motorPin, velocidad);
}
void manejarDisplay(int contadorNumeros)
{
  /* Funcion para lograr el funcionamiento del multiplexado
  Los displays están en un sistema de multiplexado
  Controlamos con esta función qué display se enciende en qué momento
  de esta manera y con ayuda del delay logramos el efecto de que están 
  encendidos ambos displays cuando en realidad se encienden y se apagan */

  /* Esta función sirve para manejar los números y el encendido y apagado de 
  displays, al contador lo dividimos por 10 para poder sacar los dígitos */
  numerosDisplay(contadorNumeros / 10);
  prenderDisplay(1, 0);
  delay(50);
  // sacamos las decenas para mostrar en el primer display
  numerosDisplay(contadorNumeros - 10 * (contadorNumeros / 10));
  prenderDisplay(0, 1);
  delay(50);
}

void numerosDisplay(int numero)
{
  // Esta función sirve para mostrar los números correspondientes
  // y llamamos a la función borrarDisplay para el apagado de los dígitos
  borrarDisplay();

  switch (numero)
  {
  case 0:
    digitalWrite(A, 1);
    digitalWrite(B, 1);
    digitalWrite(C, 1);
    digitalWrite(D, 1);
    digitalWrite(E, 1);
    digitalWrite(F, 1);
    break;
  case 1:
    digitalWrite(B, 1);
    digitalWrite(C, 1);
    break;
  case 2:
    digitalWrite(A, 1);
    digitalWrite(B, 1);
    digitalWrite(G, 1);
    digitalWrite(E, 1);
    digitalWrite(D, 1);
    break;
  case 3:
    digitalWrite(A, 1);
    digitalWrite(B, 1);
    digitalWrite(G, 1);
    digitalWrite(C, 1);
    digitalWrite(D, 1);
    break;
  case 4:
    digitalWrite(F, 1);
    digitalWrite(B, 1);
    digitalWrite(G, 1);
    digitalWrite(C, 1);
    break;
  case 5:
    digitalWrite(A, 1);
    digitalWrite(F, 1);
    digitalWrite(G, 1);
    digitalWrite(C, 1);
    digitalWrite(D, 1);
    break;
  case 6:
    digitalWrite(A, 1);
    digitalWrite(F, 1);
    digitalWrite(G, 1);
    digitalWrite(C, 1);
    digitalWrite(E, 1);
    digitalWrite(D, 1);
    break;
  case 7:
    digitalWrite(A, 1);
    digitalWrite(B, 1);
    digitalWrite(C, 1);
    break;
  case 8:
    digitalWrite(A, 1);
    digitalWrite(B, 1);
    digitalWrite(C, 1);
    digitalWrite(D, 1);
    digitalWrite(E, 1);
    digitalWrite(F, 1);
    digitalWrite(G, 1);
    break;
  case 9:
    digitalWrite(A, 1);
    digitalWrite(B, 1);
    digitalWrite(C, 1);
    digitalWrite(F, 1);
    digitalWrite(G, 1);
    break;
  default:
    break;
  }
}

void borrarDisplay()
{
  digitalWrite(A, 0);
  digitalWrite(B, 0);
  digitalWrite(C, 0);
  digitalWrite(D, 0);
  digitalWrite(E, 0);
  digitalWrite(F, 0);
  digitalWrite(G, 0);
}

void prenderDisplay(int display1, int display2)
{
  // Función que maneja el encendido de los display
  // para indicar qué display prender.
  digitalWrite(A5, display1);
  digitalWrite(A4, display2);
}

int teclaPresionada(void)
{
  // Función para recrear el antirrebote
  // primero obtenemos los pulsadores
  leerReiniciar = digitalRead(btnReinicio);
  leerSumar = digitalRead(btnSumar);
  leerRestar = digitalRead(btnRestar);

  // Si no están pulsados se inicializan en 1 y nos quedamos con ese estado
  if (leerSumar == 1)
  {
    sumarAnterior = 1;
  }

  if (leerRestar == 1)
  {
    restarAnterior = 1;
  }
  if (leerReiniciar == 1)
  {
    reiniciarAnterior = 1;
  }

  // preguntamos si fue pulsado y si el estado anterior es distinto
  // entonces modificamos y devolvemos el pulsador
  // de esta manera logramos el efecto antirrebote
  if (leerSumar == 0 && leerSumar != sumarAnterior)
  {
    sumarAnterior = leerSumar;
    return btnSumar;
  }

  if (leerRestar == 0 && leerRestar != restarAnterior)
  {
    restarAnterior = leerRestar;
    return btnRestar;
  }

  if (leerReiniciar == 0 && leerReiniciar != reiniciarAnterior)
  {
    reiniciarAnterior = leerReiniciar;
    return btnReinicio;
  }
  // si no pasa nada de lo anterior se devuelve 0
  return 0;
}

// Función para mostrar los números primos del 0 al 99
void mostrarNumerosPrimos()
{
  mostrarPrimos = true;
  apagarMotor(); // Apagar el motor al iniciar la visualización de primos
  for (int i = ultimoPrimo + 1; i <= 99; ++i)
  {
    if (esPrimo(i))
    {
      contadorNumeros = i;
      manejarDisplay(contadorNumeros);
      ultimoPrimo = i;
      delay(777);

      // Verificar si se presionó el botón de reinicio para detener la visualización de primos
      if (!mostrarPrimos || teclaPresionada() == btnReinicio)
      {
        mostrarPrimos = false;
        apagarMotor(); // Apagar el motor al salir de la visualización de primos
        return;
      }
    }
  }
  apagarMotor(); // Apagar el motor al finalizar la visualización de primos
}

void apagarLeds()
{
  // Función para apagar todos los LEDs 7 segmentos
  digitalWrite(A, 0);
  digitalWrite(B, 0);
  digitalWrite(C, 0);
  digitalWrite(D, 0);
  digitalWrite(E, 0);
  digitalWrite(F, 0);
  digitalWrite(G, 0);
}

// Función para verificar si un número es primo
bool esPrimo(int num)
{
  if (num <= 1)
    return false;
  for (int i = 2; i <= num / 2; ++i)
  {
    if (num % i == 0)
      return false;
  }
  return true;
}
void apagarMotor()
{
  
  analogWrite(motorPin, 0);
}
